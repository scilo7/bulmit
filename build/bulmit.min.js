import m from 'mithril';

var Box = {
    view: function (vnode) { return m('.box', vnode.children); }
};

var COLORS = ['white', 'light', 'dark', 'black', 'link'];
var STATES = ['primary', 'info', 'success', 'warning', 'danger'];
var SIZES = ['small', '', 'medium', 'large'];


var get_classes = function (state) {
    var classes = [];
    if (state.color) { classes.push('is-' + state.color); }
    if (state.state) { classes.push('is-' + state.state); }
    if (state.size) { classes.push('is-' + state.size); }
    if (state.loading) { classes.push('is-loading'); }
    if (state.hovered) { classes.push('is-hovered'); }
    if (state.focused) { classes.push('is-focused'); }

    return classes.join(' ')
};


var bulmify = function (state) {
    var classes = get_classes(state);
    var new_state = {};
    if (classes) { new_state.class = classes; }
    Object.keys(state).forEach(function (key) {
        if (['color', 'state', 'size', 'loading',
            'icon', 'content', 'hovered', 'focused'].indexOf(key) === -1)
            { new_state[key] = state[key]; }
    });
    return new_state
};

var collect_boolean = function (state, names) {
    var styles = [];
    names.forEach(function (name) {
        if (name in state && state[name] === true)
            { styles.push('is-' + name); }
    });
};


var sleep = function (time) { return new Promise(function (resolve) { return setTimeout(resolve, time); }); };


var smaller_than = function (sz) { return sz ? SIZES[SIZES.indexOf(sz) - 1] : 'small'; };

var Icon = {
    view: function (ref) {
            var attrs = ref.attrs;

            return m('span.icon', {class: attrs.size ? 'is-' + attrs.size : ''},
            m('i.fa', {class: 'fa-' + attrs.icon})
        );
}
};

var icon_button = function (vnode) { return [
    !vnode.attrs.icon_right ?
        m(Icon, {icon: vnode.attrs.icon, size: smaller_than(vnode.attrs.size)}) : '',
    m('span', vnode.attrs.content),
    vnode.attrs.icon_right ?
        m(Icon, {icon: vnode.attrs.icon, size: smaller_than(vnode.attrs.size)}) : ''
]; };

var Button = {
    view: function (vnode) { return m('a.button', bulmify(vnode.attrs),
        vnode.attrs.icon ? icon_button(vnode) : vnode.attrs.content); }
};

var Label = {
    view: function (vnode) { return m('label.label', vnode.children); }
};

var Input = {
    view: function (vnode) { return m('p.control',
        { class: vnode.attrs.icon ? 'has-icon has-icon-right' : '' },
        [
            m('input.input[type=text]', bulmify(vnode.attrs)),
            vnode.attrs.icon ? m(Icon, {size: 'small', icon: vnode.attrs.icon}) : ''
        ]
    ); }
};

var Select = {
    view: function (vnode) { return m('p.control',
            m('span.select', bulmify(vnode.attrs),
                m('select',
                    vnode.attrs.choices.map(function (k) { return m('option', {value: k[0]}, k[1]); })
                )
            )
        ); }
};


var TextArea = {
    view: function (vnode) { return m("p.control",
            m("textarea.textarea", bulmify(vnode.attrs))
        ); }
};


var CheckBox = {
    view: function (vnode) { return m("p.control",
            m("label.checkbox",
                m("input[type='checkbox']", bulmify(vnode.attrs)),
                vnode.attrs.content
            )
        ); }
};


var Radio = {
    view: function (vnode) { return m("p.control",
            vnode.attrs.choices.map(function (k) { return m("label.radio",
                    m("input[type='radio']", {value: k[0], name: vnode.attrs.name}),
                    k[1]
                ); }
            )
        ); }
};

var Image = {
    view: function (vnode) { return m('figure.image',
            {class: vnode.attrs.size ?
                'is-' + vnode.attrs.size + 'x' + vnode.attrs.size :
                'is-' + vnode.attrs.ratio},
            m('img', {src: vnode.attrs.src})); }
};

var Notification = {
    view: function (vnode) { return m(".notification", bulmify(vnode.attrs),
            vnode.attrs.delete ?
                m("button.delete", {onclick: vnode.attrs.onclick}) : '',
            vnode.children
        ); }
};

var Progress = {
    view: function (vnode) { return m("progress.progress", bulmify(vnode.attrs),
            vnode.children
        ); }
};

var onclick = function (vnode, val) { return function () {
        reset(vnode, val);
        if (vnode.attrs.onclick) { vnode.attrs.onclick(val); }
    }; };

var reset = function (vnode, val) {
    vnode.state.current = val;
    var max_buttons = vnode.attrs.max_buttons || 10;
    var nb = vnode.attrs.nb;
    if (nb > max_buttons) {
        var mid = nb / 2;
        if ([1, 2].includes(val)) { vnode.state.buttons = [1, 2, 3, null, mid, null, nb]; }
        else if ([nb-1, nb].includes(val)) { vnode.state.buttons = [1, null, mid, null, nb-2, nb-1, nb]; }
        else { vnode.state.buttons = [1, null, val - 1, val, val + 1, null, nb]; }
    } else {
        vnode.state.buttons = [];
        for (var i = 1; i <= nb; i++) { vnode.state.buttons.push(i); }
    }
};

var Pagination = {
    oninit: function (vnode) { return reset(vnode, vnode.attrs.current || 1); },

    view: function (vnode) { return m('nav.pagination',
        m('a.pagination-previous',
            {onclick: onclick(vnode, vnode.state.current - 1),
                disabled: vnode.state.current === 1},
            vnode.attrs.previous_text || 'Previous'),
        m('a.pagination-next',
            {onclick: onclick(vnode, vnode.state.current + 1),
                disabled: vnode.state.current === vnode.state.buttons.length},
            vnode.attrs.next_text || 'Next'),
        m('ul.pagination-list',
            vnode.state.buttons.map(function (val) { return val === null ?
                m('li', m('span.pagination-ellipsis', m.trust('&hellip;'))) :
                m('li', m('a.pagination-link',
                    {
                        class: vnode.state.current === val ? 'is-current' : null,
                        onclick: onclick(vnode, val)
                    }, val)); }
            )
        )
    ); }
};

var STYLES = ['bordered', 'striped', 'narrow'];

var header_col = function (vnode, item, idx) {
    var way = (idx === vnode.state.sort_by) ?
        (vnode.state.sort_asc ? ' U' : ' D') : '';
    return item.name + way
};


var th_tf = function (vnode, tag) { return m(tag === 'header' ? 'thead' : 'tfoot',
        m('tr',
            vnode.attrs[tag].map(function (item, idx) { return m('th', {onclick: item.sortable ? sorthandler(vnode, idx): null},
                    item.title ?
                        m('abbr', {title: item.title}, header_col(vnode, item, idx))
                        : header_col(vnode, item, idx)); }
            )
        )
    ); };

var comparator = function (idx) { return function (a, b) {
      if (a[idx] < b[idx])
        { return -1 }
      if (a[idx] > b[idx])
        { return 1 }
      return 0
    }; };

var sorthandler = function (vnode, idx) { return function () {
        if (vnode.state.sort_by === idx)
            { vnode.state.sort_asc = ! vnode.state.sort_asc; }
        else
            { vnode.state.sort_asc = true; }

        vnode.state.sort_by = idx;
        vnode.state.rows.sort(comparator(idx));
        if (! vnode.state.sort_asc)
            { vnode.state.rows.reverse(); }
    }; };

var Table = {

    oninit: function (vnode) {
        vnode.state.sort_by = null;
        vnode.state.sort_asc = true;
        vnode.state.rows = vnode.attrs.rows;
        if (vnode.attrs.paginate_by){
            vnode.state.page = 1;
            vnode.state.start_at = 0;
        }
        else
            { vnode.state.display_rows = vnode.attrs.rows; }
    },

    view: function (vnode) { return [
        m('table.table', {class: collect_boolean(vnode.attrs, STYLES)},
            vnode.attrs.header ? th_tf(vnode, 'header') : null,
            vnode.attrs.footer ? th_tf(vnode, 'footer') : null,
            m('tbody',
                vnode.state.rows.slice(
                    vnode.state.start_at,
                    vnode.state.start_at + vnode.attrs.paginate_by).map(function (row) { return m('tr', row.map(function (col) { return m('td', col); })); }
                )
           )
        ),

        vnode.attrs.paginate_by ?
            m(Pagination,
                {
                    nb: Math.ceil(vnode.state.rows.length / vnode.attrs.paginate_by),
                    onclick: function (nb) {
                        vnode.state.page = nb;
                        vnode.state.start_at = nb === 1 ? 0 : ((nb -1) * vnode.attrs.paginate_by);
                    }
                }
            ) : null
    ]; }
};

var Tag = {
    view: function (vnode) { return m('span.tag', bulmify(vnode.attrs), vnode.children); }
};

var Title = {
    view: function (vnode) { return m('h' + vnode.attrs.size + '.title' + '.is-' + vnode.attrs.size, vnode.children); }
};


var SubTitle = {
    view: function (vnode) { return m('h' + vnode.attrs.size + '.subtitle' + '.is-' + vnode.attrs.size, vnode.children); }
};

var Content = {
    view: function (vnode) { return m('content', {class: vnode.attrs.size ? 'is-' + vnode.attrs.size : ''},
            vnode.children
        ); }
};

var Level = {
    view: function (vnode) { return m('nav.level',
        {'is-mobile': vnode.attrs.mobile}, vnode.children); }
};





var LevelItem = {
    view: function (vnode) { return m('p.level-item',
        {class: vnode.attrs.centered ? 'has-text-centered': ''}, vnode.children); }
};

var MediaLeft = {
    view: function (vnode) { return m('figure.media-left', vnode.children); }
};

var MediaContent = {
    view: function (vnode) { return m('div.media-content', vnode.children); }
};

var MediaRight = {
    view: function (vnode) { return m('div.media-right', vnode.children); }
};

var Media = {
    view: function (vnode) { return m('article.media', [

        vnode.attrs.image ?
            m(MediaLeft, m('p.image', {class: 'is-' + vnode.attrs.image.ratio},
                m('img', {'src': vnode.attrs.image.src}))) : '',

        m(MediaContent, vnode.children),

        vnode.attrs.button ? m(MediaRight, vnode.attrs.button) : ''
    ]); }
};

var clickhandler = function (state, item) { return function () {
        state.selected = item.key;
        if (item.url) { console.log('redirect to ' + item.url); }
        if (item.onclick) { item.onclick(item.key); }
    }; };


var MenuItem = {
    view: function (vnode) { return [
            m('a', {onclick: clickhandler(vnode.attrs.state, vnode.attrs.root),
                class: vnode.attrs.state.selected === vnode.attrs.root.key ? "is-active" : ''},
                vnode.attrs.root.label),
            vnode.attrs.root.items ?
                m('ul', vnode.attrs.root.items.map(function (item) { return m('li', m('a', {
                        class: vnode.attrs.state.selected === item.key ? "is-active" : '',
                        onclick: clickhandler(vnode.attrs.state, item)}, item.label)); }))
                : ''
        ]; }
};

var Menu = {
    oninit: function (vnode) { return vnode.state = vnode.attrs; },
    view: function (vnode) { return m('aside.menu',
        vnode.state.items.map(function (menu) { return [
            m('p.menu-label', menu.label),
            m('ul.menu-list',
                menu.items.map(function (item) { return m('li', m(MenuItem, {state: vnode.state, root: item})); }
                )
            )
        ]; })
    ); }
};

var Message = {
    view: function (vnode) { return m('article.message',
        {class: vnode.attrs.color ? 'is-' + vnode.attrs.color : ''}, [
        vnode.attrs.header ?
            m('.message-header', m('p', vnode.attrs.header),
                vnode.attrs.onclose ? m('button',
                    {class: 'delete', onclick: vnode.attrs.onclose}): '')
        : '',
        m('.message-body', vnode.children)
    ]); }
};

var Modal = {
    view: function (vnode) { return m('.modal', {class: vnode.attrs.active ? 'is-active': ''}, [
            m('.modal-background'),
            m('.modal-content', vnode.children),
            vnode.attrs.onclose ? m('.button.modal-close', {onclick: vnode.attrs.onclose}): ''
    ]); }
};

var Nav = {
    view: function (vnode) { return m('nav.nav', [
        vnode.attrs.left ? m('.nav-left', vnode.attrs.left.map(function (item) { return m('a.nav-item', item); })) : '',
        vnode.attrs.center ? m('.nav-center', vnode.attrs.center.map(function (item) { return m('a.nav-item', item); })) : '',
        vnode.attrs.right ? m('.nav-right', vnode.attrs.right.map(function (item) { return m('a.nav-item', item); })) : ''
    ]); }
};

var CardHeader = {
    view: function (vnode) { return m('header.card-header', [
        m('p.card-header-title', vnode.attrs.title),
        m('a.card-header-icon', vnode.attrs.icon)
    ]); }
};

var CardFooter = {
    view: function (vnode) { return m('footer.card-footer', vnode.children); }
};

var CardFooterItem = {
    view: function (vnode) { return m('a.card-footer-item', vnode.attrs); }
};

var CardContent = {
    view: function (vnode) { return m('.card-content', vnode.children); }
};

var Card = {
    view: function (vnode) { return m('.card', vnode.children); }
};

var onclick$1 = function (vnode, item, idx) { return function () {
        vnode.state.active = idx;
        if (vnode.attrs.onclick) { vnode.attrs.onclick(item); }
    }; };

var TabsMenu = {
    oninit: function (vnode) { return vnode.state.active = vnode.attrs.active || 0; },

    view: function (vnode) { return m('.tabs', m('ul',
        vnode.attrs.items.map(function (item, idx) { return m('li',
                {
                    class: idx === vnode.state.active ? 'is-active' : null,
                    onclick: onclick$1(vnode, item, idx)
                },
                m('a', item.icon ? [
                    m('span.icon.is-small',
                    m('i.fa', {class: 'fa-' + item.icon})), m('span', item.label)]
                    : item.label)
            ); }
        )
    )); }
};


var clickhandler$1 = function (vnode) { return function (item) { return vnode.state.active = item.key; }; };

var Tabs = {
    oninit: function (vnode) {
        vnode.state.active = vnode.attrs.active || 0;
        vnode.state.items = vnode.attrs.items.map(function (item, idx) {
            item.key = idx;
            return item
        });
    },

    view: function (vnode) { return m('div', {style: {display: 'flex', flex: '1', width: '100%', 'flex-direction': 'column'}}, [
            m(TabsMenu, {active: vnode.state.active, onclick: clickhandler$1(vnode), items: vnode.state.items}),
            vnode.state.items.map(function (item) { return m('div',
                    {style: {display: item.key === vnode.state.active ? 'block': 'none', 'margin-left': '10px'}},
                    item.content
                ); }
            )
        ]); }

};

var onclick$2 = function (vnode, item, idx) { return function () {
        if (vnode.state.active === idx) { vnode.state.active = null; }
        else { vnode.state.active = idx; }
        if (vnode.attrs.onclick) { vnode.attrs.onclick(item); }
    }; };

var Panel = {
    view: function (vnode) { return m('nav.panel', vnode.children); }
};

var PanelHeading = {
    view: function (vnode) { return m('p.panel-heading', vnode.children); }
};

var PanelTabs = {
    oninit: function (vnode) { return vnode.state.active = vnode.attrs.active || null; },

    view: function (vnode) { return m('.panel-tabs',
        vnode.attrs.items.map(function (item, idx) { return m('a',
                {
                    class: idx === vnode.state.active ? 'is-active' : null,
                    onclick: onclick$2(vnode, item, idx)
                }, item.label
            ); }
        )
    ); }
};



var PanelBlocks = {
    oninit: function (vnode) { return vnode.state.active = vnode.attrs.active || null; },

    view: function (vnode) { return vnode.attrs.items.map(function (item, idx) { return m('a.panel-block', {
                class: idx === vnode.state.active ? 'is-active' : null,
                onclick: onclick$2(vnode, item, idx)
            }, [
            m('span.panel-icon', m('i.fa', {class: 'fa-' + item.icon})),
            item.label
        ]); }
    ); }
};

export { Box, Button, Icon, Label, Input, Select, TextArea, CheckBox, Radio, Image, Notification, Progress, Table, Tag, Title, SubTitle, Content, Level, LevelItem, Media, Menu, Message, Modal, Nav, Card, CardHeader, CardContent, CardFooter, CardFooterItem, Pagination, Tabs, Panel, PanelHeading, PanelTabs, PanelBlocks, COLORS, STATES, SIZES, get_classes, bulmify, collect_boolean, sleep, smaller_than };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
